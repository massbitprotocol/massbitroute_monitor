#!/bin/bash
TYPE="monitor"
GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3

script=$(realpath $0)
SITE_ROOT=$(realpath $(dirname $script)/..)
export HOME=$SITE_ROOT
cd $SITE_ROOT

if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

export MBR_ENV=${MBR_ENV:-dev}
export BRANCH=${BRANCH:-$MBR_ENV}
export MBRAPP_BRANCH=${MBRAPP_BRANCH:-$MBR_ENV}
export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}
export GWMAN_BRANCH=${GWMAN_BRANCH:-$MBR_ENV}
export NODE_BRANCH=${NODE_BRANCH:-$MBR_ENV}
export GATEWAY_BRANCH=${GATEWAY_BRANCH:-$MBR_ENV}
export STAT_BRANCH=${STAT_BRANCH:-$MBR_ENV}
export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}
export MONITORDEPLOY_BRANCH=${MONITORDEPLOY_BRANCH:-$MBR_ENV}
export API_BRANCH=${API_BRANCH:-$MBR_ENV}
export SESSION_BRANCH=${SESSION_BRANCH:-$MBR_ENV}
export GIT_BRANCH=${GIT_BRANCH:-$MBR_ENV}
export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

_repo() {
	REPOS="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$MBR_ENV \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
 $mbr_root/gbc|https://github.com/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
 $SITE_ROOT|https://github.com/massbitprotocol/massbitroute_monitor|$MONITOR_BRANCH \
 $SITE_ROOT/data|$GIT_PRIVATE_READ_URL/massbitroute/monitordeploy.git|$MONITORDEPLOY_BRANCH \
"
}

_repo

git="git -C $SITE_ROOT"

dir="/massbit/massbitroute/app/src/sites/services/$TYPE"
mbr_cli="$dir/mbr"
script_run="$dir/scripts/run"
cmd="$dir/cmd_server"
nginx="$cmd nginx"
service_dir=/massbit/massbitroute/app/src/sites/services

sec="_username=automation&_secret=$CHECK_MK_AUTOMATION_SECRET"
arg="request_format=python&output_format=json"
host="https://$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
pip="pip install"
_prepare() {
	echo "Prepare"
	cd /massbit/massbitroute/app/src/sites/services/monitor/scripts

	apt update
	apt install -y parallel python3 python3-pip parallel
	pip install --upgrade pip
	pip install -r requirements.txt

	cd $SITE_ROOT
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db $SITE_ROOT/vars

	# rm -rf $SITE_ROOT/tmp/*
	echo "mbr-monitor" >$SITE_ROOT/vars/TYPE
	#	bash $SITE_ROOT/scripts/install.sh

}
_tune_hosts() {
	if [ -z "$MONITOR_DOMAIN" ]; then return; fi
	grep $MONITOR_DOMAIN /etc/hosts >/dev/null
	if [ $? -ne 0 ]; then
		echo 127.0.0.1 $MONITOR_DOMAIN >>/etc/hosts
	fi
}
_reload() {
	# _cron
	_tune_hosts
	bash $SITE_ROOT/scripts/server.sh _kill
	bash $SITE_ROOT/etc/mkagent/agents/push.sh _kill
	$cmd _update
	$cmd update
	$cmd start all
}

_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_init() {
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi

	source $SITE_ROOT/.env

	_git_clone $GIT_PRIVATE_READ_URL/massbitroute/env.git /massbit/massbitroute/app/src/env $MBR_ENV
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc

	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
		liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf

	supervisorctl update
}
_install_one() {
	_init
	_prepare
	_install_repos
}
_install() {
	_install_one
	_supervisor
}
_del_monitor_host() {
	_site=$1
	hostname=$2
	host="https://$MONITOR_DOMAIN/$_site/check_mk/webapi.py?$sec&$arg"
	# sec="_username=automation&_secret=158a0dba-50e4-446d-a6c7-b4018a4191b3"
	# arg="request_format=python&output_format=json"
	# host="https://monitor.mbr.massbitroute.com/mbr/check_mk/webapi.py?$sec&$arg"

	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	action="delete_host"
	host_info='request={"hostname":"'$hostname'"}'
	curl -sSfL "$host&action=$action" -d $host_info | jq

	# action="activate_changes"
	# host_info='request={"sites":["mbr"]}'
	# curl -sSfL "$host&action=$action" -d $host_info | jq
	# su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'

}
_monitor_activate() {
	_site=$1
	host="https://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	su - mbr -c "touch /omd/sites/mbr/etc/check_mk/main.mk"
	# sec="_username=automation&_secret=158a0dba-50e4-446d-a6c7-b4018a4191b3"
	# arg="request_format=python&output_format=json"
	# host="https://monitor.mbr.massbitroute.com/mbr/check_mk/webapi.py?$sec&$arg"

	action="activate_changes"
	host_info='request={"sites":["mbr"]}'
	curl -sSfL "$host&action=$action" -d $host_info | jq

	su - mbr -c "rm /omd/sites/mbr/etc/check_mk/main.mk"
}

_add_monitor_host() {
	_site=$1
	hostname=$2
	ip=$3
	group=$4
	disc=$5
	host="https://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	if [ -z "$disc" ]; then disc=0; fi
	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	_mark=/tmp/${_site}_$hostname
	# if [ ! -f "$_mark" ]; then
	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	action="add_host"
	host_info='request={"hostname":"'$hostname'","folder":"'$group'","attributes":{"ipaddress":"'$ip'","site":"mbr","tag_agent":"cmk-agent"}}'
	curl -sSfL "$host&action=$action" -d $host_info
	# st=$(curl -sSfL "$host&action=$action" -d $host_info | jq .result_code)
	# if [ $st -ne 0 ]; then
	# 	sleep 1
	# 	st=$(curl -sSfL "$host&action=$action" -d $host_info | jq .result_code)
	# fi

	touch $_mark
	# su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'

	# fi

	if [ $disc -eq 1 ]; then
		# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
		action="discover_services"
		host_info='request={"hostname":"'$hostname'"}'
		curl -sSfL "$host&action=$action" -d $host_info
		# st=$(curl -sSfL "$host&action=$action" -d $host_info | jq .result_code)
		# if [ $st -ne 0 ]; then
		# 	sleep 1
		# 	st=$(curl -sSfL "$host&action=$action" -d $host_info | jq .result_code)
		# fi
		# su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
	fi
	# su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'

}

_redis_monitor() {
	/opt/omd/versions/2.0.0p18.cre/bin/redis-cli -s /omd/sites/mbr/tmp/run/redis $@
}
# _add_core_monitors() {
# 	_add_monitor_host mbr-stat-eu-1 34.88.224.156 mbr-stat
# 	_add_monitor_host mbr-stat-eu-2 34.88.146.128 mbr-stat

# 	_add_monitor_host mbr-portal-as-1 34.126.181.168 mbr-portal
# 	_add_monitor_host mbr-portal-as-2 34.126.176.201 mbr-portal

# 	_add_monitor_host mbr-monitor-eu-1 35.228.36.179 mbr-monitor 1
# 	_add_monitor_host mbr-monitor-eu-2 34.88.133.22 mbr-monitor

# 	_add_monitor_host mbr-git-eu-1 34.88.161.189 mbr-git
# 	_add_monitor_host mbr-git-eu-2 34.88.202.210 mbr-git

# 	_add_monitor_host mbr-api-eu-1 34.88.231.165 mbr-api
# 	_add_monitor_host mbr-api-as-1 34.87.189.191 mbr-api
# }
_refresh_monitors() {
	su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	su - mbr -c 'cmk -v -I;cmk -R'
	# su - mbr -c 'cmk -v -II mbr-monitor-eu-1;cmk -v -I;cmk -R'

	su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
}

_remove_monitors() {
	_block=$1
	_net=$2
	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	tmp1=$(mktemp)
	tmp2=$(mktemp)
	tmp=$(mktemp)
	_type=gateway
	_site=${_type}-${_block}-${_net}
	curl -sk https://$PORTAL_DOMAIN/deploy/info/$_type/listid | awk -v type=$_type '$9 == 1 && $10 == 1 {print type"-"$3"-"$4"-"$1}' | sort >$tmp1
	su - ${_site} -c 'lq "GET hosts\nColumns: name"' | awk '/^gateway/' | sort >$tmp2
	comm -23 $tmp2 $tmp1 | while read h; do
		echo $script _del_monitor_host $_site $h >>$tmp
	done
	_type=node
	_site=${_type}-${_block}-${_net}
	curl -sk https://$PORTAL_DOMAIN/deploy/info/$_type/listid | awk -v type=$_type '$9 == 1 && $10 == 1 {print type"-"$3"-"$4"-"$1}' | sort >$tmp1
	su - ${_site} -c 'lq "GET hosts\nColumns: name"' | awk '/^node/' | sort >$tmp2
	comm -23 $tmp2 $tmp1 | while read h; do
		echo $script _del_monitor_host $_site $h >>$tmp
	done
	# type=dapi
	# curl -sk https://$PORTAL_DOMAIN/deploy/info/$type/listid | awk -v type=$type '{print type"-"$3"-"$4"-"$1}' | sort >$tmp1
	# su - mbr -c 'lq "GET services\nColumns: description\nFilter: host_name = mbr-monitor-eu-1"' | awk '/^dapi-/' | sort >$tmp2
	# comm -23 $tmp2 $tmp1 | while read h; do
	# 	$0 _del_monitor_host $h
	# done

	_run_me $_site ${tmp}
	_monitor_activate $_site
	rm $tmp1 $tmp2 $tmp
	# su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
}
_create_site() {
	_site=$1
	_pass=$2
	omd create $_site
	omd start $_site
	su - $_site -c "htpasswd -b /omd/sites/$_site/etc/htpasswd cmkadmin $_pass"
}
_run_me() {
	_site=$1
	_f=$2
	su - $_site -c "touch /omd/sites/$_site/etc/check_mk/main.mk"
	cat ${_f}
	bash ${_f}
	#cat ${_f} | parallel -j$(nproc)
	su - $_site -c "rm /omd/sites/$_site/etc/check_mk/main.mk"
}
_add_monitors() {
	_block=$1
	_net=$2
	# _add_core_monitors
	# script_run=$SITE_ROOT/scripts/_run_me.sh
	script_run_gateway=$SITE_ROOT/data/_run_me_gateway.sh
	script_run_node=$SITE_ROOT/data/_run_me_node.sh
	>$script_run_gateway
	>$script_run_node
	token_file=$SITE_ROOT/data/tokens.txt
	if [ ! -f "$token_file" ]; then touch $token_file; fi

	token_core_file=$SITE_ROOT/data/tokens_core.txt
	cp $token_core_file ${token_file}.tmp
	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	tmp=$(mktemp)
	# token_gw=$(mktemp)
	# token_node=$(mktemp)
	mk_reload=0
	_site=gateway-${_block}-${_net}
	# echo curl -sSfL https://$PORTAL_DOMAIN/deploy/info/gateway/listid-${_block}-${_net} -o ${tmp}
	curl -sSfL https://$PORTAL_DOMAIN/deploy/info/gateway/listid-${_block}-${_net} -o ${tmp} >/dev/null
	if [ $? -eq 0 ]; then
		echo >>${tmp}
		cat ${tmp} | while read id user_id block net ip continent country token status approved _remain; do
			if [ -z "$id" ]; then continue; fi
			if [ $status -ne 1 ]; then continue; fi
			if [ $approved -ne 1 ]; then continue; fi
			_hostname=gateway-$block-$net-$id
			echo $script _add_monitor_host $_site $_hostname $ip mbr-gateway-$block-$net 1 >>${tmp}.run
			_access_token=$(echo -n ${_hostname} | sha1sum | cut -d' ' -f1)
			echo $_access_token $_hostname >>${token_file}.tmp
			mk_reload=1
			# sleep 1
		done

	fi
	mv ${tmp}.run $script_run_gateway
	# _run_me $_site ${tmp}.run
	# _monitor_activate $_site 1
	# _run_me ${tmp}.run
	rm ${tmp}*

	_site=node-${_block}-${_net}
	tmp=$(mktemp)
	# echo curl -sSfL https://$PORTAL_DOMAIN/deploy/info/node/listid-${_block}-${_net} -o ${tmp}
	curl -sSfL https://$PORTAL_DOMAIN/deploy/info/node/listid-${_block}-${_net} -o ${tmp} >/dev/null
	if [ $? -eq 0 ]; then
		echo >>${tmp}
		cat ${tmp} | while read id user_id block net ip continent country token status approved _remain; do
			if [ -z "$id" ]; then continue; fi
			if [ $status -ne 1 ]; then continue; fi
			if [ $approved -ne 1 ]; then continue; fi
			_hostname=node-$block-$net-$id
			echo $script _add_monitor_host $_site $_hostname $ip mbr-node-$block-$net 1 1 >>${tmp}.run
			_access_token=$(echo -n ${_hostname} | sha1sum | cut -d' ' -f1)
			echo $_access_token $_hostname >>${token_file}.tmp
			mk_reload=1
			# sleep 1
		done

	fi
	mv ${tmp}.run $script_run_node
	# _run_me $_site ${tmp}.run
	rm ${tmp}*
	diff -s ${token_file}.tmp $token_file >/dev/null
	if [ $? -ne 0 ]; then
		mv ${token_file}.tmp $token_file
		# cd $SITE_ROOT/data
		# _git_config
		# git add .
		# git commit -m update
		# git push
		bash $SITE_ROOT/scripts/server.sh _kill
	fi

	# cat ${tmp}.run
	#	n=$(wc -l ${tmp}.run | cut -d' ' -f1)

	# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	# cat ${tmp}.run | parallel -j$(nproc)
	# _monitor_activate $_site 1

}
_del_monitors() {
	su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	tmp=$(mktemp)
	curl -sSfL https://$PORTAL_DOMAIN/deploy/info/gateway/listid -o $tmp >/dev/null
	if [ $? -eq 0 ]; then
		cat $tmp | while read id user_id block net ip; do
			_del_monitor_host gateway-$block-$net-$id
		done

	fi
	curl -sSfL https://$PORTAL_DOMAIN/deploy/info/node/listid -o $tmp >/dev/null
	if [ $? -eq 0 ]; then
		cat $tmp | while read id user_id block net ip; do
			_del_monitor_host node-$block-$net-$id
		done

	fi
	rm $tmp
	#_monitor_activate
	su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
}

_update_repos() {
	_git_config
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_add_host_file() {
	if [ ! -f "/etc/hosts.bk" ]; then
		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
	fi
	cat /etc/hosts.bk >/tmp/hosts
	echo curl -s https://api.$DOMAIN/deploy/info/hosts -o /tmp/hosts.1
	curl -s https://api.$DOMAIN/deploy/info/hosts -o /tmp/hosts.1
	if [ -f "/tmp/hosts.1" ]; then
		cat /tmp/hosts.1 >>/tmp/hosts
		cat /tmp/hosts >/etc/hosts
		rm /tmp/hosts.1
	fi
}
_update() {
	echo "Update"
	_st_update=0
	_update_repos
	_st_update=$?

	_add_host_file
	return $_st_update
}

_discover_host() {
	_type=$1
	cat $SITE_ROOT/data/_run_me_${_type}.sh | while read cmd; do bash $cmd; done
	_monitor_activate ${_type}-eth-mainnet
}
_monitor() {

	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$script _reload
	fi
	# $0 _remove_hosts
	$0 _add_monitors eth mainnet
	# $0 _add_monitor_host mbr-monitor-eu-1 35.228.36.179 mbr-monitor 1
	# $0 _monitor_activate
	# $0 _refresh_monitors
	# $cmd start all
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
