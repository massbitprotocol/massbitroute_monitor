#!/bin/bash
TYPE="monitor"

GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3

SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
script=$SITE_ROOT/scripts

export HOME=$SITE_ROOT
ROOT_DIR=$SITE_ROOT

source $SITE_ROOT/env/env.sh
source $SITE_ROOT/scripts/base.sh

PORTAL_DOMAIN=portal.$DOMAIN
cd $SITE_ROOT

curl="timeout 10 curl -sfkL"
mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services
mkagent=$service_dir/mkagent

git="git -C $SITE_ROOT"

dir="/massbit/massbitroute/app/src/sites/services/$TYPE"
mbr_cli="$dir/mbr"
script_run="$dir/scripts/run"
cmd="$dir/cmd_server"
nginx="$cmd nginx"
GIT_PUBLIC_URL="https://github.com"
mkdir -p $SITE_ROOT/data
# if [ ! -f "$SITE_ROOT/data/dirty" ]; then
# 	echo 0 >$SITE_ROOT/data/dirty
# fi

if [ ! -f "$SITE_ROOT/data/nstale" ]; then
	echo 100 >$SITE_ROOT/data/nstale
fi

# service_dir=/massbit/massbitroute/app/src/sites/services

arg="request_format=python&output_format=json"
# host="https://$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
pip="pip install"

_repo() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PUBLIC_URL" ]; then
		echo "GIT_PUBLIC_URL missing"
		exit 1
	fi

	export ASDF_BRANCH=latest

	export GBC_BRANCH=latest
	export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}

	export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}

	export MKAGENT_BRANCH=latest

	REPOS="\
	   $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
	 $mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
	 $mbr_root/gbc/bin/.asdf|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_asdf|$ASDF_BRANCH \
"
}

_repo_private() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "GIT_PRIVATE_READ_URL missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
		echo "GIT_PRIVATE_BRANCH missing"
		exit 1
	fi

	export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

	export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
	export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
	export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}

	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}
	export SSL_BRANCH=${SSL_BRANCH:-$GIT_PRIVATE_BRANCH}

	_env
	REPOS_PRIVATE="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$ENV_BRANCH \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
"
	REPOS_RUNTIME="\ 
"

}

_omd_install() {
	cd $SITE_ROOT
	cat scripts/checkmk/checkmka* >/tmp/check-mk-raw-2.0.0p17_0.focal_amd64.deb
	apt-get update
	dpkg -i /tmp/check-mk-raw-2.0.0p17_0.focal_amd64.deb
	apt-get -f install -y
	sed 's/Listen 80/Listen 8000/' -i /etc/apache2/ports.conf
	rsync -avz etc/check_mk/* /opt/omd/versions/2.0.0p17.cre/lib/python3/cmk/
}
_prepare() {
	echo "Prepare"
	mkdir -p \
		$SITE_ROOT/logs/nginx \
		$SITE_ROOT/db \
		$SITE_ROOT/tmp \
		$SITE_ROOT/db

	echo "Install check_mk"
	_omd_install

}

_reload() {

	bash $mkagent/agents/push.sh _kill
	$cmd _update
	$cmd update
	$cmd start all
	$script_run _add_monitors
	if [ -f "$SITE_ROOT/data/tokens_dirty.txt" ]; then
		echo 1 >$SITE_ROOT/data/tokens_dirty.txt
	fi
	bash $SITE_ROOT/scripts/server.sh _kill

}
_install_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_repo
	_install_sources $REPOS
	_install_status=$?
	return $_install_status
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty

	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}
_install_one() {

	_prepare
	_install_repos
}
_install() {
	_install_one
	_supervisor
}
_monitor_activate() {
	_site=$1
	sec="_username=$OMD_USERNAME&_secret=$OMD_SECRET"
	# if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
	# 	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# fi

	host="http://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	# su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	action="activate_changes"
	host_info='request={"sites":["'$OMD_SITE'"]}'
	$curl "$host&action=$action" -d $host_info | jq
}
_remove_monitor_host() {
	_site=$1
	hostname=$2
	host="http://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	action="delete_host"
	host_info='request={"hostname":"'$hostname'"}'
	echo $curl "$host&action=$action" -d $host_info
	$curl "$host&action=$action" -d $host_info | jq
}
_remove_orphan() {

	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	if [ "$_types" == "internal" ]; then return; fi

	if [ -z "$_types" ]; then _types="gateway"; fi
	_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	if [ -z "$_blocks" ]; then _blocks="eth"; fi
	_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	if [ -z "$_nets" ]; then _nets="mainnet"; fi
	for _type in $_types; do
		for _block in $_blocks; do
			for _net in $_nets; do
				_site=${_type}-${_block}-${_net}

				_ok=0

				tmpa=$(mktemp)

				for _ss in 0-0 0-1 1-0 1-1; do
					_f_cache=listid-${_block}-${_net}-$_ss
					tmp=$(mktemp)
					$curl http://$PORTAL_DOMAIN/deploy/info/${_type}/$_f_cache -o ${tmp} >/dev/null
					if [ $? -eq 0 ]; then
						cat $tmp >>$tmpa
						echo >>$tmpa
					else
						_ok=1
					fi
					rm $tmp

				done
				if [ $_ok -eq 0 ]; then
					tmp1=$(mktemp)
					tmp2=$(mktemp)
					cat $tmpa | awk '{print $1}' | sort >$tmp1

					su - $OMD_SITE -c 'lq "GET hosts\nColumns: name"' | cut -d'-' -f4- | sort >$tmp2
					# echo "tmp1"
					# cat $tmp1
					# echo "tmp2"
					# cat $tmp2
					# comm $tmp1 $tmp2
					comm -13 $tmp1 $tmp2 | while read _id; do
						_remove_monitor_host $_site ${_site}-${_id}
					done
					rm $tmp1 $tmp2
				fi
				rm $tmpa
				#_monitor_activate $_site
			done
		done
	done

}

_remove_olds() {
	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	if [ -z "$_types" ]; then _types="gateway"; fi
	_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	if [ -z "$_blocks" ]; then _blocks="eth"; fi
	_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	if [ -z "$_nets" ]; then _nets="mainnet"; fi
	for _type in $_types; do
		for _block in $_blocks; do

			for _net in $_nets; do
				_site=${_type}-${_block}-${_net}
				su - $OMD_SITE -c 'lq "GET hosts\nColumns: name"' | while read _hostname; do
					_n=$(su - $OMD_SITE -c 'lq "GET services\nFilter: host_name = '$_hostname'"' | wc -l)
					if [ $_n -le 3 ]; then
						if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
							su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
						fi
						_remove_monitor_host $_site $_hostname
					fi

				done
				_monitor_activate $_site
				su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
			done

		done
	done

}

_call() {
	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	$@
	su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
}

_flush_monitor() {
	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk;cmk --flush;cmk -R;rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	echo 1 >/massbit/massbitroute/app/src/sites/services/monitor/data/tokens_dirty.txt
}
_check_host_access() {
	_site=$1
	_ip=$2
	_hostname=$3
	$curl https://$_ip/_ping
	if [ $? -ne 0 ]; then
		if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
			su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
		fi
		echo _remove_monitor_host $_site $_hostname
		_remove_monitor_host $_site $_hostname
		su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	fi
}
_update_stat() {
	hostname=$1
	_path=$SITE_ROOT/data/stat/$(echo $hostname | sed 's/-/\//' | sed 's/-/\//' | sed 's/-/\//')
	mkdir -p $_path
	su - $OMD_SITE -c "lq 'GET services\nFilter: host_name = $hostname\nFilter: description ~ mbr-node-[a-zA-Z0-9-]{36}$\nColumns: description\nStats: avg perf_data'" | awk 'NF == 3 {split($1,v,";");id=v[1];gsub(/mbr-node-/,"",id);rtt=v[2];gsub(/rtt=/,"",rtt);size=$2;gsub(/size=/,"",size);time=$3;gsub(/time=/,"",time);time1=time*1000000;if(size > 0 && time1 > 0 ) {speed=sprintf("%.f",size/time);print id,speed}}' | sort -rn -k2 >$_path/mbr-node
}
_add_monitor_host() {
	sec="_username=$OMD_USERNAME&_secret=$OMD_SECRET"
	# _force=$(cat $SITE_ROOT/data/dirty)
	# NSTALE=$(cat $SITE_ROOT/data/nstale)
	# if [ -z "$NSTALE" ]; then NSTALE=100; fi

	_site=$1
	hostname=$2
	ip=$3
	group=$4
	# disc=$5
	# state=$6
	_update_stat $hostname
	# nstale=$(su - $OMD_SITE -c 'lq "GET services\nStats: state >= 0\nStats: staleness >= 1"' | cut -d';' -f2)
	# if [ $nstale -gt $NSTALE ]; then return; fi

	# if [ "$_site" != "internal" ]; then
	# 	$curl https://$ip/_ping
	# 	if [ $? -ne 0 ]; then return; fi
	# fi

	# _check_host_access $_site $ip $hostname

	host="http://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	# if [ -z "$disc" ]; then disc=0; fi
	_mark=/tmp/${_site}_$hostname
	# _status=$(cat $_mark | jq .result_code)
	# if [ $_status -ne 0 ]; then return; fi
	# _nservices=$(cat $_mark | jq .result | awk '{sub(/^.*, total\s+/,"");sub(/services.*$/,"");print}')

	# if [ -z "$_nservices" ]; then _nservices=0; fi
	# if [ -z "$_status" ]; then _status=0; fi
	# if [ ! -f "$_mark" ]; then
	action="add_host"
	host_info='request={"hostname":"'$hostname'","folder":"'$group'","attributes":{"ipaddress":"'$ip'","site":"'$OMD_SITE'","tag_agent":"cmk-agent"}}'
	# if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
	# 	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# fi
	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	$curl "$host&action=$action" -d $host_info
	# su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# touch $_mark
	# fi
	# _dirty=$(cat $SITE_ROOT/data/tokens_dirty.txt)

	# if [ \( "$state" == "0-0" \) -o \( $_dirty -eq 0 \) ]; then
	# 	if [ \( $_force -eq 1 \) -o \( $_status -ne 0 \) -o \( $_nservices -lt 5 \) ]; then
	# 		action="discover_services"
	# 		host_info='request={"hostname":"'$hostname'"}'
	# 		if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
	# 			su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# 		fi

	# 		$curl "$host&action=$action" -d $host_info >$_mark
	# 		su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"

	# 	fi
	# else
	action="discover_services"
	host_info='request={"hostname":"'$hostname'"}'
	# if [ ! -f "/omd/sites/$OMD_SITE/etc/check_mk/main.mk" ]; then
	# su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# fi

	$curl "$host&action=$action" -d $host_info >$_mark
	su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	#fi

	cat $_mark | jq
}

_redis_monitor() {
	/opt/omd/versions/2.0.0p18.cre/bin/redis-cli -s /omd/sites/$OMD_SITE/tmp/run/redis $@
}

_refresh_monitors() {
	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	su - $OMD_SITE -c 'cmk -v -II --flush;cmk -R'
	su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	echo 1 >/massbit/massbitroute/app/src/sites/services/monitor/data/tokens_dirty.txt
}

_remove_monitors_type() {
	_type=$1
	_block=$2
	_net=$3
	_site=${_type}-${_block}-${_net}
	tmp=$(mktemp)
	$curl http://$PORTAL_DOMAIN/deploy/info/$_type/listid | awk -v type=$_type '$9 == 1 && $10 == 1 {print type"-"$3"-"$4"-"$1}' | sort >${tmp}.1
	# cat ${tmp}.1
	su - $OMD_SITE -c 'lq "GET hosts\nColumns: name"' | awk "/^${_type}/" | sort >${tmp}.2
	# cat ${tmp}.2
	comm -23 ${tmp}.2 ${tmp}.1 | while read h; do
		echo $h
		$script_run _remove_monitor_host $_site $h
	done
	rm ${tmp}*
	_monitor_activate ${_site}
}
_remove_monitors() {
	_block=$1
	_net=$2
	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	for _type in gateway node; do
		_remove_monitors_type $_type $_block $_net
	done
	su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
}

_add_monitors_internal() {
	_lock=/tmp/_add_monitors
	if [ -f "$_lock" ]; then return; fi
	touch $_lock

	_type=internal
	_script_run=$SITE_ROOT/data/_run_me.sh

	token_file=/tmp/tokens.txt
	# token_core_file=/tmp/tokens_core.txt
	if [ ! -f "$token_file" ]; then touch $token_file; fi
	# if [ ! -f "$token_core_file" ]; then touch $token_core_file; fi

	$curl http://$PORTAL_DOMAIN/deploy/info/monitor/internal -o ${token_file}.tmp
	if [ $? -ne 0 ]; then
		>$token_file
		rm $_lock
		return
	fi
	_dirty=/tmp/_dirty
	if [ ! -f "$_dirty" ]; then
		echo 0 >$_dirty
	fi
	diff -s ${token_file}.tmp $token_file >/dev/null
	if [ $? -ne 0 ]; then
		echo 1 >$_dirty
		cp ${token_file}.tmp $token_file

		tmp=$(mktemp)
		cat $token_file | cut -d' ' -f2- | while read opt; do
			echo $script_run _add_monitor_host internal $opt 1 >>${tmp}
		done
		mv $tmp $_script_run
		bash $SITE_ROOT/scripts/server.sh _kill
	fi
	rm $_lock
}

_add_monitors_type() {
	_type=$1
	_block=$2
	_net=$3
	_token_file=$4
	if [ ! -f "$_token_file" ]; then touch $_token_file; fi
	_run_file=$5

	# if [ -f "$SITE_ROOT/data/dirty" ]; then
	# 	_force=$(cat $SITE_ROOT/data/dirty)
	# fi
	# if [ -z "$_force" ]; then _force=0; fi
	# cat ${_token_file}
	# mk_reload=0
	_site=${_type}-${_block}-${_net}
	for _ss in 0-1 1-0 1-1; do
		tmp=$(mktemp)
		_f_cache=listid-${_block}-${_net}-$_ss
		$curl http://$PORTAL_DOMAIN/deploy/info/${_type}/$_f_cache -o ${tmp} >/dev/null
		if [ $? -ne 0 ]; then continue; fi
		# if [ ! -f "/tmp/$_f_cache" ]; then touch /tmp/$_f_cache; fi
		# diff -s $tmp /tmp/$_f_cache
		# if [ $? -ne 0 ]; then
		# 	echo 1 >$SITE_ROOT/data/tokens_dirty.txt
		# 	cp $tmp /tmp/$_f_cache

		# fi
		# echo >>${tmp}
		cat ${tmp} | awk 'NF > 10' | sort -n -k11 -r | while read id user_id block net ip continent country token status approved _remain; do
			if [ -z "$id" ]; then continue; fi
			_hostname=${_type}-$block-$net-$id

			# _mark=/tmp/${_site}_$_hostname
			# if [ -f "$_mark" ]; then
			# 	_status=$(cat $_mark | jq .result_code)
			# 	_nservices=$(cat $_mark | jq .result | awk '{sub(/^.*, total\s+/,"");sub(/services.*$/,"");print}')
			# 	if [ -z "$_nservices" ]; then _nservices=0; fi
			# 	if [ -z "$_status" ]; then _status=1; fi
			# 	if [ \( "$_ss" == "0-0" \) -o \( $_force -eq 1 \) -o \( $_status -ne 0 \) -o \( $_nservices -lt 5 \) ]; then
			# 		echo $script_run _add_monitor_host $_site $_hostname $ip mbr-${_type}-$block-$net 1 $_ss >>${tmp}.run
			# 	fi
			# else
			echo $script_run _add_monitor_host $_site $_hostname $ip mbr-${_type}-$block-$net 1 >>${tmp}.run
			# fi

			_access_token=$(echo -n ${_hostname} | sha1sum | cut -d' ' -f1)
			echo $_access_token $_hostname $ip $_type >>${_token_file}

		done

		cat ${tmp}.run >>$_run_file

		rm ${tmp}*
	done

}
_add_monitors_node_gateway() {
	token_file=/tmp/tokens.txt
	_script_run=$SITE_ROOT/data/_run_me.sh
	_lock=/tmp/_add_monitors
	if [ -f "$_lock" ]; then return; fi
	touch $_lock
	if [ -z "$_types" ]; then _types="gateway"; fi
	_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	if [ -z "$_blocks" ]; then _blocks="eth"; fi
	_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	if [ -z "$_nets" ]; then _nets="mainnet"; fi

	# mkdir -p $SITE_ROOT/data
	for _type in $_types; do

		>${_script_run}.tmp
		for _block in $_blocks; do
			for _net in $_nets; do
				_add_monitors_type $_type $_block $_net ${token_file}.tmp ${_script_run}.tmp
			done
		done
		mv ${_script_run}.tmp ${_script_run}
	done

	_dirty=/tmp/_dirty
	if [ ! -f "$_dirty" ]; then
		echo 0 >$_dirty
	fi
	diff -s ${token_file}.tmp $token_file >/dev/null
	if [ $? -ne 0 ]; then
		echo 1 >$_dirty
		cp ${token_file}.tmp $token_file

		tmp=$(mktemp)
		cat $token_core_file | cut -d' ' -f2- | while read opt; do
			echo $script_run _add_monitor_host internal $opt 1 >>${tmp}
		done
		mv $tmp $_script_run
		bash $SITE_ROOT/scripts/server.sh _kill
	fi
	rm $_lock
}

_add_monitors() {

	# token_file=/tmp/tokens.txt

	# if [ ! -f "$token_file" ]; then touch $token_file; fi
	# if [ ! -f "$token_core_file" ]; then touch $token_core_file; fi

	# cp $token_core_file ${token_file}.tmp

	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	if [ "$_types" == "internal" ]; then
		# echo $HOSTNAME >$SITE_ROOT/vars/ID
		_add_monitors_internal
		# return
	else
		_add_monitors_node_gateway

	fi
	# cat $token_file
	# diff -s ${token_file}.tmp $token_file >/dev/null
	# if [ $? -ne 0 ]; then
	# 	echo 1 >$SITE_ROOT/data/tokens_dirty.txt
	# 	mv ${token_file}.tmp $token_file
	# 	bash $SITE_ROOT/scripts/server.sh _kill

	# fi
	# _remove_orphan

}

_update_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_repo
	_update_sources $REPOS
	_update_status=$?

	_repo_private
	_update_sources $REPOS_PRIVATE
	if [ $_update_status -eq 0 ]; then
		_update_status=$?
	fi

	_update_sources $REPOS_RUNTIME
	if [ $_update_status -eq 0 ]; then
		_update_status=$?
	fi
	return $_update_status
}
_omd_update() {

	_site=$OMD_SITE
	_name=$OMD_USERNAME
	if [ ! -d "/opt/omd/sites/$_site" ]; then
		omd create $_site
	fi

	omd status | grep 'Overall state:  running'
	if [ $? -ne 0 ]; then
		omd start $_site
	fi
	ADMIN_USERNAME=cmkadmin
	if [ -n "$ADMIN_PASSWORD" ]; then
		su - $_site -c "htpasswd  -b /opt/omd/sites/$_site/etc/htpasswd $ADMIN_USERNAME $ADMIN_PASSWORD"
	fi

	su - $OMD_SITE -c "mkdir -p /omd/sites/$OMD_SITE/etc/check_mk/multisite.d/wato"
	echo "multisite_users.update({'cmkadmin': {'alias': 'cmkadmin', 'roles': ['admin'], 'locked': False}, 'automation': {'alias': 'Check_MK Automation - used for calling web services', 'automation_secret': '"$AUTOMATION_SECRET"', 'roles': ['admin'], 'locked': False, 'language': 'en'}, 'mison201': {'roles': ['admin'], 'locked': True, 'alias': '"$OMD_USERNAME"', 'automation_secret': '"$OMD_SECRET"', 'force_authuser': False, 'nav_hide_icons_title': None, 'icons_per_item': None, 'show_mode': None}})" >/omd/sites/$OMD_SITE/etc/check_mk/multisite.d/wato/users.mk
	su - $OMD_SITE -c "mkdir -p /omd/sites/mbr/var/check_mk/web/$OMD_USERNAME"
	echo $OMD_SECRET >/omd/sites/$OMD_SITE/var/check_mk/web/$OMD_USERNAME/automation.secret

	/etc/init.d/apache2 start

}

_update_tag() {

	git="git -C $SITE_ROOT"
	_v=$($git config --get remote.origin.url | awk -F'/' '{print $NF}')
	tmp=$(mktemp)
	$curl http://$PORTAL_DOMAIN/deploy/info/version/$_v >$tmp
	if [ $? -ne 0 ]; then
		rm $tmp
		return 0
	fi

	_tag=$(cat $tmp)

	rm $tmp

	_my_tag=$($git describe --tags)
	_tag_update=0
	if [ "$_tag" != "$_my_tag" ]; then
		$git fetch --all --tags --prune
		$git checkout $_tag
		_tag_update=1
	fi

	return $_tag_update

}

_update() {
	echo "Update"

	_omd_update
	_st_update=0
	_update_repos
	_st_update=$?

	_update_tag
	if [ $_st_update -eq 0 ]; then
		_st_update=$?
	fi
	# _add_host_file
	return $_st_update
}

_discover_host() {
	_script_run=$SITE_ROOT/data/_run_me.sh
	if [ ! -f "$_script_run" ]; then return; fi
	_lock=/tmp/_discover_host
	if [ -f "$_lock" ]; then return; fi
	touch $_lock

	su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	cat $_script_run | while read cmd; do bash $cmd; done

	for _type in $_types; do
		if [ "$_type" == "internal" ]; then
			_monitor_activate internal
		else
			for _block in $_blocks; do
				for _net in $_nets; do
					_site=${_type}-${_block}-${_net}
					_monitor_activate ${_site}
				done
			done
		fi
	done

	su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"

	# _dirty=$1
	# _dirty_f=$SITE_ROOT/data/tokens_dirty.txt
	# if [ ! -f "${_dirty_f}" ]; then echo 0 >$_dirty_f; fi
	# if [ -z "$_dirty" ]; then
	# 	_dirty=$(cat ${_dirty_f})
	# fi

	# if [ -z "$_dirty" ]; then _dirty=0; fi

	# _types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	# for _type in $_types; do
	# 	if [ \( "${_type}" == "node" -o "${_type}" == "gateway" \) ]; then

	# 		if [ -z "$_types" ]; then _types="gateway"; fi
	# 		_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	# 		if [ -z "$_blocks" ]; then _blocks="eth"; fi
	# 		_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	# 		if [ -z "$_nets" ]; then _nets="mainnet"; fi

	# 		if [ -f "$SITE_ROOT/data/_run_me_${_type}.sh" ]; then

	# 			cat $SITE_ROOT/data/_run_me_${_type}.sh | while read cmd; do bash $cmd; done

	# 			for _block in $_blocks; do
	# 				for _net in $_nets; do
	# 					_monitor_activate ${_type}-${_block}-${_net}

	# 				done
	# 			done

	# 			su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# 			echo 0 >$SITE_ROOT/data/${_type}_dirty
	# 		fi

	# 	else

	# 		su - $OMD_SITE -c "touch /omd/sites/$OMD_SITE/etc/check_mk/main.mk"
	# 		cat $SITE_ROOT/data/_run_me_${_type}.sh | while read cmd; do bash $cmd; done
	# 		_monitor_activate ${_type}
	# 		su - $OMD_SITE -c "rm /omd/sites/$OMD_SITE/etc/check_mk/main.mk"

	# 	fi
	# done
	# echo 0 >$SITE_ROOT/data/tokens_dirty.txt
	# _remove_olds
	rm $_lock
	_refresh_monitors
}

_env_update() {
	mkdir -p $SITE_ROOT/vars
	if [ -n "$MONITOR_BLOCKCHAINS" ]; then echo "$MONITOR_BLOCKCHAINS" >$SITE_ROOT/vars/MONITOR_BLOCKCHAINS; fi
	if [ -n "$MONITOR_TYPES" ]; then echo "$MONITOR_TYPES" >$SITE_ROOT/vars/MONITOR_TYPES; fi
	if [ -n "$MONITOR_NETWORKS" ]; then echo "$MONITOR_NETWORKS" >$SITE_ROOT/vars/MONITOR_NETWORKS; fi

}

_monitor() {
	_env_update

	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$script_run _reload
	fi
	$0 _add_monitors
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	_update
	$SITE_ROOT/start_server
}

$@
