#!/bin/bash
TYPE="monitor"
GRAFANA_VERSION=v8.2.1
PROMETHEUS_VERSION=v2.30.3

script=$(realpath $0)
SITE_ROOT=$(realpath $(dirname $script)/..)
export HOME=$SITE_ROOT
cd $SITE_ROOT

if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services
mkagent=$service_dir/mkagent
export MBR_ENV=${MBR_ENV:-dev}
export BRANCH=${BRANCH:-$MBR_ENV}
export MBRAPP_BRANCH=${MBRAPP_BRANCH:-$MBR_ENV}
export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}
export GWMAN_BRANCH=${GWMAN_BRANCH:-$MBR_ENV}
export NODE_BRANCH=${NODE_BRANCH:-$MBR_ENV}
export GATEWAY_BRANCH=${GATEWAY_BRANCH:-$MBR_ENV}
export STAT_BRANCH=${STAT_BRANCH:-$MBR_ENV}
export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}
export MONITORDEPLOY_BRANCH=${MONITORDEPLOY_BRANCH:-$MBR_ENV}
export API_BRANCH=${API_BRANCH:-$MBR_ENV}
export SESSION_BRANCH=${SESSION_BRANCH:-$MBR_ENV}
export GIT_BRANCH=${GIT_BRANCH:-$MBR_ENV}
export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

_repo() {
	REPOS="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$MBR_ENV \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
 $mbr_root/gbc|https://github.com/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
 $SITE_ROOT|https://github.com/massbitprotocol/massbitroute_monitor|$MONITOR_BRANCH \
 $SITE_ROOT/data|$GIT_PRIVATE_READ_URL/massbitroute/monitordeploy.git|$MONITORDEPLOY_BRANCH \
"
}

_repo

git="git -C $SITE_ROOT"

dir="/massbit/massbitroute/app/src/sites/services/$TYPE"
mbr_cli="$dir/mbr"
script_run="$dir/scripts/run"
cmd="$dir/cmd_server"
nginx="$cmd nginx"
service_dir=/massbit/massbitroute/app/src/sites/services

sec="_username=automation&_secret=$CHECK_MK_AUTOMATION_SECRET"
arg="request_format=python&output_format=json"
host="https://$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
pip="pip install"
_prepare() {
	echo "Prepare"
	cd /massbit/massbitroute/app/src/sites/services/monitor/scripts

	apt update
	apt install -y parallel python3 python3-pip parallel
	pip install --upgrade pip
	pip install -r requirements.txt

	cd $SITE_ROOT
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db $SITE_ROOT/vars

	# rm -rf $SITE_ROOT/tmp/*
	echo "mbr-monitor" >$SITE_ROOT/vars/TYPE
	#	bash $SITE_ROOT/scripts/install.sh

}
_tune_hosts() {
	if [ -z "$MONITOR_DOMAIN" ]; then return; fi
	grep $MONITOR_DOMAIN /etc/hosts >/dev/null
	if [ $? -ne 0 ]; then
		echo 127.0.0.1 $MONITOR_DOMAIN >>/etc/hosts
	fi
}
_reload() {
	# _cron
	_tune_hosts

	bash $mkagent/agents/push.sh _kill
	$cmd _update
	$cmd update
	$cmd start all
	$script _add_monitors
	if [ -f "$SITE_ROOT/data/tokens_dirty.txt" ]; then
		echo 1 >$SITE_ROOT/data/tokens_dirty.txt
	fi
	bash $SITE_ROOT/scripts/server.sh _kill

}

_install_repos() {
	_git_config
	_repo
	for _pathgit in $REPOS; do
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_init() {
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	if [ ! -f "$SITE_ROOT/.env" ]; then
		echo "$MBR_ENV" >$SITE_ROOT/.env
	fi

	source $SITE_ROOT/.env

	_git_clone $GIT_PRIVATE_READ_URL/massbitroute/env.git /massbit/massbitroute/app/src/env $MBR_ENV
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc

	bash $SITE_ROOT/cmd_server _env
	source $SITE_ROOT/.env_raw
	_repo
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	apt-get update
	apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
		liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	systemctl enable supervisor
	systemctl start supervisor

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf

	supervisorctl update
}
_install_one() {
	_init
	_prepare
	_install_repos
}
_install() {
	_install_one
	_supervisor
}
_remove_monitor_host() {
	_site=$1
	hostname=$2
	host="https://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	action="delete_host"
	host_info='request={"hostname":"'$hostname'"}'
	echo curl -sSfL "$host&action=$action" -d $host_info
	curl -sSfL "$host&action=$action" -d $host_info | jq
}
_remove_olds() {
	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	if [ -z "$_types" ]; then _types="gateway"; fi
	_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	if [ -z "$_blocks" ]; then _blocks="eth"; fi
	_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	if [ -z "$_nets" ]; then _nets="mainnet"; fi
	for _type in $_types; do
		for _block in $_blocks; do

			for _net in $_nets; do
				_site=${_type}-${_block}-${_net}
				su - mbr -c 'lq "GET hosts\nColumns: name"' | while read _hostname; do
					_n=$(su - mbr -c 'lq "GET services\nFilter: host_name = '$_hostname'"' | wc -l)
					if [ $_n -le 3 ]; then
						_remove_monitor_host $_site $_hostname
					fi

				done
			done

		done
	done

}

_call() {
	su - mbr -c "touch /omd/sites/mbr/etc/check_mk/main.mk"
	$@
	su - mbr -c "rm /omd/sites/mbr/etc/check_mk/main.mk"
}

_monitor_activate() {
	_site=$1
	host="https://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	su - mbr -c "touch /omd/sites/mbr/etc/check_mk/main.mk"
	action="activate_changes"
	host_info='request={"sites":["mbr"]}'
	curl -sSfL "$host&action=$action" -d $host_info | jq
}

_flush_monitor() {
	su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk;cmk --flush;rm /omd/sites/mbr/etc/check_mk/main.mk'
	echo 1 >/massbit/massbitroute/app/src/sites/services/monitor/data/tokens_dirty.txt
}
_check_host_access() {
	_site=$1
	_ip=$2
	_hostname=$3
	timeout 3 curl -skSfL https://$_ip/_ping
	if [ $? -ne 0 ]; then
		if [ ! -f "/omd/sites/mbr/etc/check_mk/main.mk" ]; then
			su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
		fi
		echo _remove_monitor_host $_site $_hostname
		_remove_monitor_host $_site $_hostname
		su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
	fi
}
_add_monitor_host() {
	_site=$1
	hostname=$2
	ip=$3
	group=$4
	disc=$5
	_check_host_access $_site $ip $hostname

	host="https://${_site}.$MONITOR_DOMAIN/mbr/check_mk/webapi.py?$sec&$arg"
	if [ -z "$disc" ]; then disc=0; fi
	_mark=/tmp/${_site}_$hostname
	_status=$(cat $_mark | jq .result_code)
	_nservices=$(cat $_mark | jq .result | awk '{sub(/^.*, total\s+/,"");sub(/services.*$/,"");print}')

	if [ -z "$_nservices" ]; then _nservices=0; fi
	if [ -z "$_status" ]; then _status=0; fi
	if [ ! -f "$_mark" ]; then
		action="add_host"
		host_info='request={"hostname":"'$hostname'","folder":"'$group'","attributes":{"ipaddress":"'$ip'","site":"mbr","tag_agent":"cmk-agent"}}'
		if [ ! -f "/omd/sites/mbr/etc/check_mk/main.mk" ]; then
			su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
		fi

		timeout 10 curl -sSfL "$host&action=$action" -d $host_info
		su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
		touch $_mark
	fi
	_dirty=$(cat $SITE_ROOT/data/tokens_dirty.txt)
	if [ $_dirty -eq 0 ]; then
		if [ \( $_status -ne 0 \) -o \( $_nservices -lt 5 \) ]; then
			action="discover_services"
			host_info='request={"hostname":"'$hostname'"}'
			if [ ! -f "/omd/sites/mbr/etc/check_mk/main.mk" ]; then
				su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
			fi

			timeout 10 curl -sSfL "$host&action=$action" -d $host_info >$_mark
			su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'

		fi
	else
		action="discover_services"
		host_info='request={"hostname":"'$hostname'"}'
		if [ ! -f "/omd/sites/mbr/etc/check_mk/main.mk" ]; then
			su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
		fi

		timeout 10 curl -sSfL "$host&action=$action" -d $host_info >$_mark
		su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
	fi
	cat $_mark | jq
}

_redis_monitor() {
	/opt/omd/versions/2.0.0p18.cre/bin/redis-cli -s /omd/sites/mbr/tmp/run/redis $@
}
# _add_core_monitors() {
# 	_add_monitor_host mbr-stat-eu-1 34.88.224.156 mbr-stat
# 	_add_monitor_host mbr-stat-eu-2 34.88.146.128 mbr-stat

# 	_add_monitor_host mbr-portal-as-1 34.126.181.168 mbr-portal
# 	_add_monitor_host mbr-portal-as-2 34.126.176.201 mbr-portal

# 	_add_monitor_host mbr-monitor-eu-1 35.228.36.179 mbr-monitor 1
# 	_add_monitor_host mbr-monitor-eu-2 34.88.133.22 mbr-monitor

# 	_add_monitor_host mbr-git-eu-1 34.88.161.189 mbr-git
# 	_add_monitor_host mbr-git-eu-2 34.88.202.210 mbr-git

# 	_add_monitor_host mbr-api-eu-1 34.88.231.165 mbr-api
# 	_add_monitor_host mbr-api-as-1 34.87.189.191 mbr-api
# }
_refresh_monitors() {
	su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	su - mbr -c 'cmk -v -I;cmk -R'
	# su - mbr -c 'cmk -v -II mbr-monitor-eu-1;cmk -v -I;cmk -R'

	su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
}

_remove_monitors_type() {
	_type=$1
	_block=$2
	_net=$3
	_site=${_type}-${_block}-${_net}
	tmp=$(mktemp)
	curl -sk https://$PORTAL_DOMAIN/deploy/info/$_type/listid | awk -v type=$_type '$9 == 1 && $10 == 1 {print type"-"$3"-"$4"-"$1}' | sort >${tmp}.1
	# cat ${tmp}.1
	su - mbr -c 'lq "GET hosts\nColumns: name"' | awk "/^${_type}/" | sort >${tmp}.2
	# cat ${tmp}.2
	comm -23 ${tmp}.2 ${tmp}.1 | while read h; do
		echo $h
		$script _remove_monitor_host $_site $h
	done
	rm ${tmp}*
	_monitor_activate ${_site}
}
_remove_monitors() {
	_block=$1
	_net=$2
	su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
	for _type in gateway node; do
		_remove_monitors_type $_type $_block $_net
	done
	su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
}

_add_monitors_internal() {
	_type=internal
	script_run_internal=$SITE_ROOT/data/_run_me_internal.sh
	token_core_file=$SITE_ROOT/data/tokens_core.txt
	_listid=$SITE_ROOT/data/${_type}_listid
	_dirty=$SITE_ROOT/data/${_type}_dirty
	if [ ! -f "$_listid" ]; then
		touch $_listid
	fi
	diff -s $token_core_file $_listid >/dev/null
	if [ $? -ne 0 ]; then
		echo 1 >$_dirty
		cp $token_core_file $_listid

		tmp=$(mktemp)
		cat $token_core_file | cut -d' ' -f2- | while read opt; do
			echo $script _add_monitor_host internal $opt 1 >>${tmp}
		done
		mv $tmp $script_run_internal
	fi
}

_add_monitors_type() {
	_type=$1
	_block=$2
	_net=$3
	_token_file=$4
	if [ ! -f "$_token_file" ]; then touch $_token_file; fi
	_run_file=$5

	# cat ${_token_file}
	# mk_reload=0
	_site=${_type}-${_block}-${_net}
	for _ss in 0-0 0-1 1-0 1-1; do
		tmp=$(mktemp)
		curl -sSfL https://$PORTAL_DOMAIN/deploy/info/${_type}/listid-${_block}-${_net}-$_ss -o ${tmp} >/dev/null
		if [ $? -eq 0 ]; then
			echo >>${tmp}
			cat ${tmp} | while read id user_id block net ip continent country token status approved _remain; do
				if [ -z "$id" ]; then continue; fi
				_hostname=${_type}-$block-$net-$id

				echo check_host_access $ip $_hostname
				_check_host_access $_site $ip $_hostname

				echo $script _add_monitor_host $_site $_hostname $ip mbr-${_type}-$block-$net 1 >>${tmp}.run
				_access_token=$(echo -n ${_hostname} | sha1sum | cut -d' ' -f1)
				echo $_access_token $_hostname $ip >>${_token_file}
				# cat ${_token_file}

			done

			cat ${tmp}.run >>$_run_file

		fi
		rm ${tmp}*
	done

}
_add_monitors() {
	_lock=/tmp/_add_monitors
	if [ -f "$_lock" ]; then return; fi
	touch $_lock

	token_file=$SITE_ROOT/data/tokens.txt
	token_core_file=$SITE_ROOT/data/tokens_core.txt
	if [ ! -f "$token_file" ]; then touch $token_file; fi

	cp $token_core_file ${token_file}.tmp

	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	if [ "$_types" == "internal" ]; then
		_add_monitors_internal
		return
	fi

	if [ -z "$_types" ]; then _types="gateway"; fi
	_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
	if [ -z "$_blocks" ]; then _blocks="eth"; fi
	_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
	if [ -z "$_nets" ]; then _nets="mainnet"; fi

	for _type in $_types; do
		_script_run=$SITE_ROOT/data/_run_me_${_type}.sh
		>${_script_run}.tmp
		for _block in $_blocks; do
			for _net in $_nets; do
				echo _add_monitors_type $_type $_block $_net ${token_file}.tmp ${_script_run}.tmp
				_add_monitors_type $_type $_block $_net ${token_file}.tmp ${_script_run}.tmp
			done
		done
		echo ${_script_run}.tmp ${_script_run}
		mv ${_script_run}.tmp ${_script_run}
	done

	# echo cat ${token_file}.tmp
	# cat ${token_file}.tmp
	# echo cat $token_file
	cat $token_file
	diff -s ${token_file}.tmp $token_file >/dev/null
	if [ $? -ne 0 ]; then
		echo 1 >$SITE_ROOT/data/tokens_dirty.txt
		mv ${token_file}.tmp $token_file
		# echo cat $token_file
		# cat $token_file
		bash $SITE_ROOT/scripts/server.sh _kill
		# echo cat $token_file
		# cat $token_file
	fi
	rm $_lock
}

_update_repos() {
	_git_config
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_add_host_file() {
	if [ ! -f "/etc/hosts.bk" ]; then
		sed '/.mbr/d' /etc/hosts >/etc/hosts.bk
	fi
	cat /etc/hosts.bk >/tmp/hosts
	echo curl -s https://api.$DOMAIN/deploy/info/hosts -o /tmp/hosts.1
	curl -s https://api.$DOMAIN/deploy/info/hosts -o /tmp/hosts.1
	if [ -f "/tmp/hosts.1" ]; then
		cat /tmp/hosts.1 >>/tmp/hosts
		cat /tmp/hosts >/etc/hosts
		rm /tmp/hosts.1
	fi
}
_update() {
	echo "Update"
	_st_update=0
	_update_repos
	_st_update=$?

	_add_host_file
	return $_st_update
}

_discover_host() {
	_lock=/tmp/_discover_host
	if [ -f "$_lock" ]; then return; fi
	touch $_lock
	_dirty=$1
	_dirty_f=$SITE_ROOT/data/tokens_dirty.txt
	if [ ! -f "${_dirty_f}" ]; then echo 0 >$_dirty_f; fi
	if [ -z "$_dirty" ]; then
		_dirty=$(cat ${_dirty_f})
	fi

	if [ -z "$_dirty" ]; then _dirty=0; fi
	# if [ $_dirty -ne 1 ]; then return; fi

	_types=$(cat $SITE_ROOT/vars/MONITOR_TYPES)
	for _type in $_types; do
		if [ \( "${_type}" == "node" -o "${_type}" == "gateway" \) ]; then

			if [ -z "$_types" ]; then _types="gateway"; fi
			_blocks=$(cat $SITE_ROOT/vars/MONITOR_BLOCKCHAINS)
			if [ -z "$_blocks" ]; then _blocks="eth"; fi
			_nets=$(cat $SITE_ROOT/vars/MONITOR_NETWORKS)
			if [ -z "$_nets" ]; then _nets="mainnet"; fi

			if [ -f "$SITE_ROOT/data/_run_me_${_type}.sh" ]; then
				# su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
				# cat $SITE_ROOT/data/_run_me_${_type}.sh | parallel -j$(nproc)
				cat $SITE_ROOT/data/_run_me_${_type}.sh | while read cmd; do bash $cmd; done

				for _block in $_blocks; do
					for _net in $_nets; do
						_monitor_activate ${_type}-${_block}-${_net}

					done
				done

				su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'
				echo 0 >$SITE_ROOT/data/${_type}_dirty
			fi

		else

			su - mbr -c 'touch /omd/sites/mbr/etc/check_mk/main.mk'
			cat $SITE_ROOT/data/_run_me_${_type}.sh | while read cmd; do bash $cmd; done
			_monitor_activate ${_type}
			su - mbr -c 'rm /omd/sites/mbr/etc/check_mk/main.mk'

		fi
	done
	echo 0 >$SITE_ROOT/data/tokens_dirty.txt
	rm $_lock
}

_monitor() {

	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$script _reload
	fi
	#$0 _add_monitors
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

$@
